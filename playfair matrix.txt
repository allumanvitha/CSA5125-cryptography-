#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Fixed Playfair matrix as provided
char matrix[SIZE][SIZE] = {
    {'M', 'F', 'H', 'I', 'K'},
    {'U', 'N', 'O', 'P', 'Q'},
    {'Z', 'V', 'W', 'X', 'Y'},
    {'E', 'L', 'A', 'R', 'G'},
    {'D', 'S', 'T', 'B', 'C'}
};

// Find the position of a letter in the matrix
void findPosition(char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I'; // J maps to I
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
}

// Prepare plaintext: remove non-letters, convert to digraphs
void preprocessPlaintext(const char *input, char *output) {
    int len = 0;
    for (int i = 0; input[i]; i++) {
        if (isalpha(input[i])) {
            output[len++] = toupper(input[i]) == 'J' ? 'I' : toupper(input[i]);
        }
    }

    output[len] = '\0';

    // Insert 'X' between repeated letters in a digraph
    int i = 0;
    while (output[i]) {
        if (output[i + 1] && output[i] == output[i + 1]) {
            for (int j = len; j > i + 1; j--) {
                output[j] = output[j - 1];
            }
            output[i + 1] = 'X';
            len++;
        }
        i += 2;
    }

    // If length is odd, add 'X' at the end
    if (len % 2 != 0) {
        output[len++] = 'X';
    }
    output[len] = '\0';
}

// Encrypt digraph
void encryptPair(char a, char b, char *out) {
    int row1, col1, row2, col2;
    findPosition(a, &row1, &col1);
    findPosition(b, &row2, &col2);

    if (row1 == row2) {
        out[0] = matrix[row1][(col1 + 1) % SIZE];
        out[1] = matrix[row2][(col2 + 1) % SIZE];
    } else if (col1 == col2) {
        out[0] = matrix[(row1 + 1) % SIZE][col1];
        out[1] = matrix[(row2 + 1) % SIZE][col2];
    } else {
        out[0] = matrix[row1][col2];
        out[1] = matrix[row2][col1];
    }
}

// Encrypt full plaintext
void encryptPlayfair(const char *plaintext, char *ciphertext) {
    int len = strlen(plaintext);
    int p = 0;

    for (int i = 0; i < len; i += 2) {
        char pair[2];
        encryptPair(plaintext[i], plaintext[i + 1], pair);
        ciphertext[p++] = pair[0];
        ciphertext[p++] = pair[1];
    }
    ciphertext[p] = '\0';
}

int main() {
    char input[] = "Must see you over Cadogan West. Coming at once.";
    char cleaned[512], ciphertext[512];

    preprocessPlaintext(input, cleaned);
    encryptPlayfair(cleaned, ciphertext);

    printf("Original message:\n%s\n\n", input);
    printf("Cleaned and prepared plaintext:\n%s\n\n", cleaned);
    printf("Encrypted message:\n%s\n", ciphertext);

    return 0;
}
