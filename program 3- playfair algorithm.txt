#include <stdio.h>
#include <string.h>
#include <ctype.h>
char matrix[5][5];
void prepareMatrix(char *key) {
    int used[26] = {0}, k = 0;
    if (!key) return;
    for (int i = 0; key[i]; i++) {
        char ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';
        if (isalpha(ch) && !used[ch - 'A']) {
            matrix[k / 5][k % 5] = ch;
            used[ch - 'A'] = 1;
            k++;
        }
    }
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (ch == 'J') continue;
        if (!used[ch - 'A']) {
            matrix[k / 5][k % 5] = ch;
            used[ch - 'A'] = 1;
            k++;
        }
    }
}
void find(char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < 5; i++)
        for (int j = 0; j < 5; j++)
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
}
void encrypt(char *msg) {
    for (int i = 0; msg[i]; i += 2) {
        char a = toupper(msg[i]);
        char b = toupper(msg[i + 1]);
        if (!isalpha(b)) b = 'X';
        if (a == b) b = 'X';
        int r1, c1, r2, c2;
        find(a, &r1, &c1);
        find(b, &r2, &c2);
        if (r1 == r2)
            printf("%c%c", matrix[r1][(c1 + 1) % 5], matrix[r2][(c2 + 1) % 5]);
        else if (c1 == c2)
            printf("%c%c", matrix[(r1 + 1) % 5][c1], matrix[(r2 + 1) % 5][c2]);
        else
            printf("%c%c", matrix[r1][c2], matrix[r2][c1]);
    }
    printf("\n");
}
int main() {
    char key[30], text[100];
    printf("Enter keyword: ");
    scanf("%s", key);
    printf("Enter plaintext (no spaces): ");
    scanf("%s", text);
    prepareMatrix(key);
    printf("Encrypted message: ");
    encrypt(text);
    return 0;
}
