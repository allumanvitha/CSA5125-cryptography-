#include <stdio.h>
#include <string.h>
#include <ctype.h>
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1; 
}
char encryptChar(char ch, int a, int b) {
    if (isalpha(ch)) {
        ch = toupper(ch);
        return ((a * (ch - 'A') + b) % 26) + 'A';
    }
    return ch;
}
char decryptChar(char ch, int a, int b) {
    if (isalpha(ch)) {
        ch = toupper(ch);
        int a_inv = modInverse(a, 26);
        if (a_inv == -1) {
            printf("Error: 'a' (%d) has no modular inverse under mod 26\n", a);
            return '?';
        }
        return (a_inv * ((ch - 'A' - b + 26) % 26)) % 26 + 'A';
    }
    return ch;
}
void encryptText(const char* plaintext, char* ciphertext, int a, int b) {
    int i;
    for (i = 0; plaintext[i]; i++) {
        ciphertext[i] = encryptChar(plaintext[i], a, b);
    }
    ciphertext[i] = '\0';
}
void decryptText(const char* ciphertext, char* plaintext, int a, int b) {
    int i;
    for (i = 0; ciphertext[i]; i++) {
        plaintext[i] = decryptChar(ciphertext[i], a, b);
    }
    plaintext[i] = '\0';
}

int main() {
    char plaintext[100], ciphertext[100], decrypted[100];
    int a, b;

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0'; 

    printf("Enter key 'a' (must be coprime to 26): ");
    scanf("%d", &a);
    printf("Enter key 'b': ");
    scanf("%d", &b);

    if (modInverse(a, 26) == -1) {
        printf("Error: 'a' (%d) is not valid. Must be coprime to 26.\n", a);
        return 1;
    }

    encryptText(plaintext, ciphertext, a, b);
    printf("Encrypted: %s\n", ciphertext);

    decryptText(ciphertext, decrypted, a, b);
    printf("Decrypted: %s\n", decrypted);

    return 0;
}
