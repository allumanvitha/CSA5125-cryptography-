#include <stdio.h>
#include <stdint.h>

// Permutation Choice 1 (PC-1) - Initial permutation of the key (56 bits)
int PC1[] = {
    57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2,
    59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39,
    31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37,
    29, 21, 13, 5, 28, 20, 12, 4
};

// Permutation Choice 2 (PC-2) - Selection of 48 bits from 56 for the subkey
int PC2[] = {
    14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4,
    26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40,
    51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32
};

// Function to perform the left shift operation on a 28-bit half
void leftShift(uint32_t *half, int shifts) {
    *half = ((*half) << shifts) | ((*half) >> (28 - shifts));
    *half &= 0x0FFFFFFF; // Keep only the lower 28 bits
}

// Function to permute the key according to the given permutation table
uint64_t permute(uint64_t key, int *permutation, int size) {
    uint64_t permutedKey = 0;
    for (int i = 0; i < size; i++) {
        int bit = (key >> (64 - permutation[i])) & 1;
        permutedKey |= (bit << (size - 1 - i));
    }
    return permutedKey;
}

// Generate subkeys from the initial key
void generateSubkeys(uint64_t key) {
    // Step 1: Initial permutation (PC-1) to split the key into two halves
    uint64_t permutedKey = permute(key, PC1, 56);  // Apply PC-1 (Initial permutation)
    uint32_t C = (permutedKey >> 28) & 0x0FFFFFFF; // Left half (28 bits)
    uint32_t D = permutedKey & 0x0FFFFFFF;         // Right half (28 bits)

    printf("Initial C0: %08X D0: %08X\n", C, D);

    // Step 2: Left shifts for key scheduling
    for (int round = 0; round < 16; round++) {
        int shift = (round == 0 || round == 1 || round == 8 || round == 15) ? 1 : 2;

        // Apply left shift
        leftShift(&C, shift);  // Left shift C by 1 or 2 bits
        leftShift(&D, shift);  // Left shift D by 1 or 2 bits

        // Step 3: Combine the two halves (C and D) back into a 56-bit key
        uint64_t combinedKey = ((uint64_t)C << 28) | D;

        // Step 4: Apply PC-2 to select 48 bits from the combined 56 bits
        uint64_t subkey = permute(combinedKey, PC2, 48);

        // Print the 48-bit subkey
        printf("Round %2d Subkey: %012lX\n", round + 1, subkey);
    }
}

int main() {
    uint64_t key = 0x133457799BBCDFF1; // Example 64-bit key for DES
    
    printf("Original Key: %016lX\n", key);
    generateSubkeys(key);
    
    return 0;
}
