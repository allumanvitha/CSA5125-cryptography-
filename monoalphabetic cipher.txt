#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to check if a character is already in the result
int isInKeyword(char c, char* keyword, int len) {
    for (int i = 0; i < len; i++) {
        if (keyword[i] == c) return 1;
    }
    return 0;
}

// Function to create the cipher alphabet from the keyword
void generateCipher(char *keyword, char cipher[26]) {
    int index = 0;
    int len = strlen(keyword);

    // Add keyword characters to cipher
    for (int i = 0; i < len; i++) {
        char c = tolower(keyword[i]);
        if (!isInKeyword(c, cipher, index) && isalpha(c)) {
            cipher[index++] = c;
        }
    }

    // Add remaining letters of the alphabet
    for (char c = 'a'; c <= 'z'; c++) {
        if (!isInKeyword(c, cipher, index)) {
            cipher[index++] = c;
        }
    }
}

// Function to encrypt the plaintext using cipher
void encrypt(char *plaintext, char cipher[26]) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        char c = plaintext[i];
        if (isalpha(c)) {
            int isUpper = isupper(c);
            int index = tolower(c) - 'a';
            char encryptedChar = cipher[index];
            putchar(isUpper ? toupper(encryptedChar) : encryptedChar);
        } else {
            putchar(c);  // Preserve non-letter characters
        }
    }
}

int main() {
    char keyword[100];
    char plaintext[1000];
    char cipher[26];

    printf("Enter keyword: ");
    scanf("%s", keyword);

    printf("Enter plaintext: ");
    getchar(); // consume newline
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0'; // Remove newline

    generateCipher(keyword, cipher);

    printf("Encrypted text: ");
    encrypt(plaintext, cipher);
    printf("\n");

    return 0;
}
