#include <stdio.h>
int mod_inverse(int a, int m) {
    a %= m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1; 
}
int determinant(int mat[2][2]) {
    return (mat[0][0]*mat[1][1] - mat[0][1]*mat[1][0]) % 26;
}
int inverse_matrix(int in[2][2], int out[2][2]) {
    int det = determinant(in);
    if (det < 0) det += 26;
    int inv_det = mod_inverse(det, 26);
    if (inv_det == -1) return 0; 
    out[0][0] =  in[1][1] * inv_det % 26;
    out[0][1] = -in[0][1] * inv_det % 26;
    out[1][0] = -in[1][0] * inv_det % 26;
    out[1][1] =  in[0][0] * inv_det % 26;
    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
            if (out[i][j] < 0) out[i][j] += 26;

    return 1;
}
void multiply(int A[2][2], int B[2][2], int result[2][2]) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            result[i][j] = 0;
            for (int k = 0; k < 2; k++) {
                result[i][j] += A[i][k] * B[k][j];
            }
            result[i][j] %= 26;
        }
    }
}
void print_matrix(int mat[2][2]) {
    for (int i = 0; i < 2; i++)
        printf("| %2d %2d |\n", mat[i][0], mat[i][1]);
}
int main() {
    int P[2][2] = {
        {7, 4},
        {11, 15}
    };
    int C[2][2] = {
        {7, 8},
        {0, 19}
    };
    int P_inv[2][2];
    if (!inverse_matrix(P, P_inv)) {
        printf("Plaintext matrix is not invertible. Cannot recover key.\n");
        return 1;
    }1
    int K[2][2];
    multiply(C, P_inv, K);

    printf("Recovered Key Matrix:\n");
    print_matrix(K);

    return 0;
}
